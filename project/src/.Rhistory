suppressMessages(suppressWarnings(library(vegan)))
suppressMessages(suppressWarnings(library(gplots)))
data=read.csv("../external_data/Himalayan_grid_matrix.csv",header=TRUE);
counts=as.matrix(data[,-1]);
rownames(counts)=data[,1];
counts[1:5,1:5]
new_data1 <- data.frame(read.csv('../external_data/MohanGrids.csv'));
new_data2 <- data.frame(read.csv('../external_data/MohanGrids2.csv'));
bird_species <- union(as.vector(colnames(data)), union(as.vector(new_data1[,1]), as.vector(new_data2[,1])));
new_data <- matrix(0,dim(counts)[1]+3,length(bird_species));
new_data[1,match(new_data1[,1],bird_species)]=new_data1[,2];
new_data[2,match(new_data1[,1],bird_species)]=new_data1[,3];
new_data[3,match(new_data2[,1],bird_species)]=new_data2[,2];
new_data[4:(dim(counts)[1]+3),match(colnames(counts),bird_species)]=counts;
new_counts <- as.matrix(new_data);
rownames(new_counts) <- c(c("U1","U2","MA1"),rownames(counts));
dim(new_counts)
colnames(new_counts)
new_counts[1:5,1:5]
length(bird_species)
bodymass <- read.csv('../external_data//massKushal.csv');
dim(bodymass)
bodymass[1:10,]
bodymass[1,]
bodymass_val <- bodymass_data[,2];
bodymass_birds <- bodymass_data[,1];
match(bird_species,bodymass_birds)
bodymass_data <- read.csv('../external_data//massKushal.csv');
bodymass_val <- bodymass_data[,2];
bodymass_birds <- bodymass_data[,1];
match(bird_species,bodymass_birds)
bodymass_birds[1]
match(bodymass_birds[1], bird_species)
bird_species[1]
length(bird_species)
bird_species
new_counts[1:5,1:5]
colnames(data)
data[1:5,1:5]
data[1:5,1]
colnames(counts)
data=read.csv("../external_data/Himalayan_grid_matrix.csv",header=TRUE);
counts=as.matrix(data[,-1]);
rownames(counts)=data[,1];
counts[1:5,1:5]
new_data1 <- data.frame(read.csv('../external_data/MohanGrids.csv'));
new_data2 <- data.frame(read.csv('../external_data/MohanGrids2.csv'));
bird_species <- union(as.vector(colnames(counts)), union(as.vector(new_data1[,1]), as.vector(new_data2[,1])));
new_data <- matrix(0,dim(counts)[1]+3,length(bird_species));
new_data[1,match(new_data1[,1],bird_species)]=new_data1[,2];
new_data[2,match(new_data1[,1],bird_species)]=new_data1[,3];
new_data[3,match(new_data2[,1],bird_species)]=new_data2[,2];
new_data[4:(dim(counts)[1]+3),match(colnames(counts),bird_species)]=counts;
new_counts <- as.matrix(new_data);
rownames(new_counts) <- c(c("U1","U2","MA1"),rownames(counts));
bodymass_data <- read.csv('../external_data//massKushal.csv');
bodymass_val <- bodymass_data[,2];
bodymass_birds <- bodymass_data[,1];
match(bird_species,bodymass_birds)
bodymass_matched <- bodymass_data[match(bird_species,bodymass_birds),2];
length(bodymass_matched)
dim(new_counts)
new_counts %*% bodymass_matched
new_counts_bodymass <- sweep(new_counts,MARGIN=2,bodymass_matched,`*`)
new_counts[,1]
new_counts_bodymass[,1]
bodymass_birds[36]
bodymass_matched[36]
bodymass_matched[1]
dim(new_counts_bodymass)
min(bodymass_matched)
new_counts_bodymass <- sweep(new_counts,MARGIN=2,log(bodymass_matched),`*`)
new_counts_bodymass <- round(new_counts_bodymass);
for(k in 2:8)
{
Topic_Clus=topics(new_counts_bodymass,k,kill=0,tol=0.0001);
omega <- Topic_Clus$omega;
rownames(omega) <- rownames(new_counts);
theta <- Topic_Clus$theta;
rownames(theta) <- bird_species;
write.table(omega, paste0('../derived_data/bodymass_data/Topic_omega_clus',k,'.txt'));
write.table(theta, paste0('../derived_data/bodymass_data/Topic_theta_clus',k,'.txt'));
}
new_counts_bodymass[1:5,1:5]
counts[1:5,1:5]
new_counts[1:5,1:5]
new_counts[1:10,1:10]
new_counts_bodymass[1:10,1:10]
y=5
data <- data.frame(read_csv(paste0('/Users/kushal/Documents/Matthew Stephens Project/Alex Bird Data/external_data/counts_data_past/grids',years,'.csv')));
counts=as.matrix(data[,-1]);
rownames(counts)=data[,1];
new_data1 <- data.frame(read.csv('../external_data/MohanGrids.csv'));
new_data2 <- data.frame(read.csv('../external_data/MohanGrids2.csv'));
bird_species <- union(as.vector(colnames(counts)), union(as.vector(new_data1[,1]), as.vector(new_data2[,1])));
new_data <- matrix(0,dim(counts)[1]+3,length(bird_species));
new_data[1,match(new_data1[,1],bird_species)]=new_data1[,2];
new_data[2,match(new_data1[,1],bird_species)]=new_data1[,3];
new_data[3,match(new_data2[,1],bird_species)]=new_data2[,2];
new_data[4:(dim(counts)[1]+3),match(colnames(counts),bird_species)]=counts;
new_counts <- as.matrix(new_data);
rownames(new_counts) <- c(c("U1","U2","MA1"),rownames(counts));
dim(new_counts)
dim(data)
years <- 15
data <- data.frame(read_csv(paste0('/Users/kushal/Documents/Matthew Stephens Project/Alex Bird Data/external_data/counts_data_past/grids',years,'.csv')));
suppressMessages(suppressWarnings(library(readr)))
data <- data.frame(read_csv(paste0('/Users/kushal/Documents/Matthew Stephens Project/Alex Bird Data/external_data/counts_data_past/grids',years,'.csv')));
dim(data)
counts=as.matrix(data[,-1]);
rownames(counts)=data[,1];
new_data1 <- data.frame(read.csv('../external_data/MohanGrids.csv'));
new_data2 <- data.frame(read.csv('../external_data/MohanGrids2.csv'));
bird_species <- union(as.vector(colnames(counts)), union(as.vector(new_data1[,1]), as.vector(new_data2[,1])));
new_data <- matrix(0,dim(counts)[1]+3,length(bird_species));
new_data[1,match(new_data1[,1],bird_species)]=new_data1[,2];
new_data[2,match(new_data1[,1],bird_species)]=new_data1[,3];
new_data[3,match(new_data2[,1],bird_species)]=new_data2[,2];
new_data[4:(dim(counts)[1]+3),match(colnames(counts),bird_species)]=counts;
new_counts <- as.matrix(new_data);
rownames(new_counts) <- c(c("U1","U2","MA1"),rownames(counts));
dim(new_counts)
setwd("~/")
setwd("~/Documents/count-clustering/project/src")
deng_topics <- get(load("../rdas/deng_topic_fit.rda"))
deng_topics[[4]]$omega
deng_topics[[5]]$omega
dim(deng_topics[[5]]$omega)
top_features <- ExtractTopFeatures(theta_mat, top_features=10, "poisson");
library(CountClust)
top_features <- ExtractTopFeatures(theta_mat, top_features=10, "poisson");
theta_mat <- deng_topics[[5]]$theta;
top_features <- ExtractTopFeatures(theta_mat, top_features=10, "poisson");
top_features
theta_mat[1:5,1:5]
gene_names <- rownames(theta_mat);
gene_names
gene_names[top_features]
gene_list <- apply(1:dim(top_features)[1], 1, function(x) gene_names[top_features[x,]])
1:dim(top_features)[1]
top_features[x,]
top_features[1,]
gene_names[top_features[1,]]
gene_list <- do.call(rbind, lapply(1:dim(top_features)[1], 1, function(x) gene_names[top_features[x,]]))
lapply(1:dim(top_features)[1], 1, function(x) gene_names[top_features[x,]])
gene_list <- do.call(rbind, lapply(1:dim(top_features)[1], function(x) gene_names[top_features[x,]]))
gene_list
out <- queryMany(gene_list[1,],  scopes="name", fields=c("summary"), species="mouse");
out <- mygene::queryMany(gene_list[1,],  scopes="name", fields=c("summary"), species="mouse");
out
out <- mygene::queryMany(gene_list[1,],  scopes="symbol", fields=c("name", "summary"), species="mouse");
out
out[1,]
out[2,]
out <- mygene::queryMany(gene_list[2,],  scopes="symbol", fields=c("name", "summary"), species="mouse");
out
out <- mygene::queryMany(gene_list[3,],  scopes="symbol", fields=c("name", "summary"), species="mouse");
out
gene_list
setwd("~/Documents/count-clustering/project/src")
reads <- data.frame(fread('../external_data/Deng_Data/Deng_cell_data.txt'),row.names=1);
files <- list.files("../external_data/Deng_Data/Deng_files/");
cell_meta <- unlist(lapply(files, function(x) strsplit(x,"_")[[1]][2]));
embryo_id <- unlist(lapply(files, function(x) strsplit(strsplit(x,"_")[[1]][3],"-")[[1]][1]));
cell_meta[grep("zy",cell_meta)]="zy";
cell_meta[grep("smartseq2", files)]="8cell_nd";
cell_meta[grep("8cell_2pooled", files)]="8cell_nd";
cell_meta[grep("8cell_split", files)]="8cell_nd";
cell_meta[grep("16cell_2pooled", files)]="16cell_nd";
cell_meta[grep("16cell_split", files)]="16cell_nd";
indices_not_reqd <- which(cell_meta=="BXC"   | cell_meta=="C57twocell" | cell_meta=="fibroblast" | cell_meta =="8cell_nd" | cell_meta == "16cell_nd");
cell_meta <- cell_meta[-indices_not_reqd];
embryo_id <- embryo_id[-indices_not_reqd];
embryo_id[which(embryo_id == "expression.txt")]="."
cell_embryo <- paste0(cell_meta,"_", embryo_id);
reads <- reads[,-indices_not_reqd];
cell_meta_unique <- c("zy","early2cell","mid2cell","late2cell","4cell","8cell","16cell","earlyblast","midblast","lateblast") ;
order_of_development <- order(match(cell_meta,cell_meta_unique))
reads <- reads[,order_of_development];
cell_meta <- cell_meta[order_of_development]
cell_embryo <- cell_embryo[order_of_development];
colnames(reads) <- cell_meta;
names(cell_meta) <- "dev. phase"
names(cell_embryo) <- "dev.phase.embryo"
rm(list=ls())
library(data.table)
#install_github('kkdey/maptpx')
library(maptpx)
library(CountClust)
library(data.table)
reads <- data.frame(fread('../external_data/Deng_Data/Deng_cell_data.txt'),row.names=1);
files <- list.files("../external_data/Deng_Data/Deng_files/");
cell_meta <- unlist(lapply(files, function(x) strsplit(x,"_")[[1]][2]));
embryo_id <- unlist(lapply(files, function(x) strsplit(strsplit(x,"_")[[1]][3],"-")[[1]][1]));
cell_meta[grep("zy",cell_meta)]="zy";
cell_meta[grep("smartseq2", files)]="8cell_nd";
cell_meta[grep("8cell_2pooled", files)]="8cell_nd";
cell_meta[grep("8cell_split", files)]="8cell_nd";
cell_meta[grep("16cell_2pooled", files)]="16cell_nd";
cell_meta[grep("16cell_split", files)]="16cell_nd";
indices_not_reqd <- which(cell_meta=="BXC"   | cell_meta=="C57twocell" | cell_meta=="fibroblast" | cell_meta =="8cell_nd" | cell_meta == "16cell_nd");
cell_meta <- cell_meta[-indices_not_reqd];
embryo_id <- embryo_id[-indices_not_reqd];
embryo_id[which(embryo_id == "expression.txt")]="."
cell_embryo <- paste0(cell_meta,"_", embryo_id);
reads <- reads[,-indices_not_reqd];
cell_meta_unique <- c("zy","early2cell","mid2cell","late2cell","4cell","8cell","16cell","earlyblast","midblast","lateblast") ;
order_of_development <- order(match(cell_meta,cell_meta_unique))
reads <- reads[,order_of_development];
cell_meta <- cell_meta[order_of_development]
cell_embryo <- cell_embryo[order_of_development];
colnames(reads) <- cell_meta;
names(cell_meta) <- "dev. phase"
names(cell_embryo) <- "dev.phase.embryo"
index <- grep("Fbox15", rownames(reads))[1]
plot(1:dim(reads)[2], log(reads[index,]+1), type="l", col="red",  ylab="log expr.", main="Fbox15 expression", xaxt="n", xlab="")
labels = match(unique(cell_meta), cell_meta);
abline(v=labels)
labels_low=labels;
labels_up=c(labels[2:length(labels)],dim(reads)[2]);
mid_point=labels_low +0.5*(labels_up-labels_low);
axis(1,at=mid_point, unique(cell_meta),las=3, cex.axis=0.8);
index
rownames(reads)
grep("Fbox",rownames(reads))
grep("FBox",rownames(reads))
grep("Fbox",rownames(reads))
grep("Fbox15",rownames(reads))
grep("Actb1",rownames(reads))
grep("Actb",rownames(reads))
unique(rownames(reads))
unique(rownames(reads))[6000:7000]
unique(rownames(reads))[7000:8000]
index <- grep("Fbxo15", rownames(reads))[1]
plot(1:dim(reads)[2], log(reads[index,]+1), type="l", col="red",  ylab="log expr.", main="Fbox15 expression", xaxt="n", xlab="")
labels = match(unique(cell_meta), cell_meta);
abline(v=labels)
labels_low=labels;
labels_up=c(labels[2:length(labels)],dim(reads)[2]);
mid_point=labels_low +0.5*(labels_up-labels_low);
axis(1,at=mid_point, unique(cell_meta),las=3, cex.axis=0.8);
index <- grep("Tceb1", rownames(reads))[1]
plot(1:dim(reads)[2], log(reads[index,]+1), type="l", col="red",  ylab="log expr.", main="Tceb1 expression", xaxt="n", xlab="")
labels = match(unique(cell_meta), cell_meta);
abline(v=labels)
labels_low=labels;
labels_up=c(labels[2:length(labels)],dim(reads)[2]);
mid_point=labels_low +0.5*(labels_up-labels_low);
axis(1,at=mid_point, unique(cell_meta),las=3, cex.axis=0.8);
#dev.off()
index <- grep("Hsp90ab1", rownames(reads))[1]
plot(1:dim(reads)[2], log(reads[index,]+1), type="l", col="red",  ylab="log expr.", main="Tceb1 expression", xaxt="n", xlab="")
labels = match(unique(cell_meta), cell_meta);
abline(v=labels)
labels_low=labels;
labels_up=c(labels[2:length(labels)],dim(reads)[2]);
mid_point=labels_low +0.5*(labels_up-labels_low);
axis(1,at=mid_point, unique(cell_meta),las=3, cex.axis=0.8);
#dev.off()
setwd("~/")
setwd("~/Documents/topotpx-ghpages/project/src")
data=read.csv("../external_data/Himalayan_grid_matrix.csv",header=TRUE);
counts=as.matrix(data[,-1]);
rownames(counts)=data[,1];
new_data1 <- data.frame(read.csv('../external_data/MohanGrids.csv'));
new_data2 <- data.frame(read.csv('../external_data/MohanGrids2.csv'));
bird_species <- union(as.vector(colnames(counts)), union(as.vector(new_data1[,1]), as.vector(new_data2[,1])));
new_data <- matrix(0,dim(counts)[1]+3,length(bird_species));
new_data[1,match(new_data1[,1],bird_species)]=new_data1[,2];
new_data[2,match(new_data1[,1],bird_species)]=new_data1[,3];
new_data[3,match(new_data2[,1],bird_species)]=new_data2[,2];
new_data[4:(dim(counts)[1]+3),match(colnames(counts),bird_species)]=counts;
new_counts <- as.matrix(new_data);
rownames(new_counts) <- c(c("U1","U2","MA1"),rownames(counts));
colnames(new_counts) <- bird_species;
new_counts <- new_counts[-(1:3),];
dim(new_counts)
install.packages("picante")
library(picante)
nullmat <- picante::randomizeMatrix(new_counts, null.model = "trialswap", iterations=1000);
dim(null_mat)
nullmat
dim(nullmat)
max(nullmat)
topics_null <- topics(nullmat, K=2, tol=0.1);
metadata=read.csv("../external_data/Himalayan_grid_metadata.csv",header=TRUE);
elevation_metadata=metadata$Elevation;
east_west_dir = metadata$WorE;
metadata=read.csv("../external_data/Himalayan_grid_metadata.csv",header=TRUE);
elevation_metadata=metadata$Elevation;
east_west_dir = metadata$WorE;
nullmat <- picante::randomizeMatrix(new_counts, null.model = "trialswap", iterations=1000);
topics_null <- topics(nullmat, K=2, tol=0.1);
K <- 2
barplot(t(topics_null$omega[order(elevation_metadata),]),col=2:(K+1),axisnames=F,space=0,border=NA,main="",las=1,ylim=c(0,1),cex.axis=1.5,cex.main=1.4, xlab="elevation")
title(main=paste("Structure Plot topic proportions,k=",K))
combo_patch_dir = paste0(round(elevation_metadata));
combo_patch_dir_ordered = combo_patch_dir[order(elevation_metadata)];
match_labs=match(unique(combo_patch_dir_ordered),combo_patch_dir_ordered);
match_labs_suffix=c(match_labs[2:length(unique(combo_patch_dir_ordered))],35);
match_labs_prefix=match_labs[1:(length(unique(combo_patch_dir_ordered)))];
labs=match_labs_prefix + 0.5*(match_labs_suffix - match_labs_prefix);
axis(1,at=labs,unique(combo_patch_dir_ordered),las=2);
abline(v=match_labs[2:length(match_labs)]);
topics_null <- topics(new_mat, K=2, tol=0.1);
K <- 2
barplot(t(topics_null$omega[order(elevation_metadata),]),col=2:(K+1),axisnames=F,space=0,border=NA,main="",las=1,ylim=c(0,1),cex.axis=1.5,cex.main=1.4, xlab="elevation")
title(main=paste("Structure Plot topic proportions,k=",K))
combo_patch_dir = paste0(round(elevation_metadata));
combo_patch_dir_ordered = combo_patch_dir[order(elevation_metadata)];
match_labs=match(unique(combo_patch_dir_ordered),combo_patch_dir_ordered);
match_labs_suffix=c(match_labs[2:length(unique(combo_patch_dir_ordered))],35);
match_labs_prefix=match_labs[1:(length(unique(combo_patch_dir_ordered)))];
labs=match_labs_prefix + 0.5*(match_labs_suffix - match_labs_prefix);
axis(1,at=labs,unique(combo_patch_dir_ordered),las=2);
abline(v=match_labs[2:length(match_labs)]);
nullmat <- picante::randomizeMatrix(new_counts, null.model = "richness", iterations=1000);
topics_null <- topics(new_mat, K=2, tol=0.1);
K <- 2
barplot(t(topics_null$omega[order(elevation_metadata),]),col=2:(K+1),axisnames=F,space=0,border=NA,main="",las=1,ylim=c(0,1),cex.axis=1.5,cex.main=1.4, xlab="elevation")
title(main=paste("Structure Plot topic proportions,k=",K))
combo_patch_dir = paste0(round(elevation_metadata));
combo_patch_dir_ordered = combo_patch_dir[order(elevation_metadata)];
match_labs=match(unique(combo_patch_dir_ordered),combo_patch_dir_ordered);
match_labs_suffix=c(match_labs[2:length(unique(combo_patch_dir_ordered))],35);
match_labs_prefix=match_labs[1:(length(unique(combo_patch_dir_ordered)))];
labs=match_labs_prefix + 0.5*(match_labs_suffix - match_labs_prefix);
axis(1,at=labs,unique(combo_patch_dir_ordered),las=2);
abline(v=match_labs[2:length(match_labs)]);
nullmat <- picante::randomizeMatrix(new_counts, null.model = "richness", iterations=1000);
topics_null <- topics(new_counts, K=2, tol=0.1);
K <- 2
barplot(t(topics_null$omega[order(elevation_metadata),]),col=2:(K+1),axisnames=F,space=0,border=NA,main="",las=1,ylim=c(0,1),cex.axis=1.5,cex.main=1.4, xlab="elevation")
title(main=paste("Structure Plot topic proportions,k=",K))
combo_patch_dir = paste0(round(elevation_metadata));
combo_patch_dir_ordered = combo_patch_dir[order(elevation_metadata)];
match_labs=match(unique(combo_patch_dir_ordered),combo_patch_dir_ordered);
match_labs_suffix=c(match_labs[2:length(unique(combo_patch_dir_ordered))],35);
match_labs_prefix=match_labs[1:(length(unique(combo_patch_dir_ordered)))];
labs=match_labs_prefix + 0.5*(match_labs_suffix - match_labs_prefix);
axis(1,at=labs,unique(combo_patch_dir_ordered),las=2);
abline(v=match_labs[2:length(match_labs)]);
nullmat <- picante::randomizeMatrix(new_counts, null.model = "richness", iterations=1000);
topics_null <- topics(nullmat, K=2, tol=0.1);
K <- 2
barplot(t(topics_null$omega[order(elevation_metadata),]),col=2:(K+1),axisnames=F,space=0,border=NA,main="",las=1,ylim=c(0,1),cex.axis=1.5,cex.main=1.4, xlab="elevation")
title(main=paste("Structure Plot topic proportions,k=",K))
combo_patch_dir = paste0(round(elevation_metadata));
combo_patch_dir_ordered = combo_patch_dir[order(elevation_metadata)];
match_labs=match(unique(combo_patch_dir_ordered),combo_patch_dir_ordered);
match_labs_suffix=c(match_labs[2:length(unique(combo_patch_dir_ordered))],35);
match_labs_prefix=match_labs[1:(length(unique(combo_patch_dir_ordered)))];
labs=match_labs_prefix + 0.5*(match_labs_suffix - match_labs_prefix);
axis(1,at=labs,unique(combo_patch_dir_ordered),las=2);
abline(v=match_labs[2:length(match_labs)]);
X <- CheckCounts(new_counts)
library(slam)
## Null model log probability
sx <- sum(X)
qnull <- col_sums(X)/sx
null <- sum( X$v*log(qnull[X$j]) ) - 0.5*(n+p)*(log(sx) - log(2*pi))
CheckCounts <- function(counts){
if(class(counts)[1] == "TermDocumentMatrix"){ counts <- t(counts) }
if(is.null(dimnames(counts)[[1]])){ dimnames(counts)[[1]] <- paste("doc",1:nrow(counts)) }
if(is.null(dimnames(counts)[[2]])){ dimnames(counts)[[2]] <- paste("wrd",1:ncol(counts)) }
empty <- row_sums(counts) == 0
if(sum(empty) != 0){
counts <- counts[!empty,]
cat(paste("Removed", sum(empty), "blank documents.\n")) }
return(as.simple_triplet_matrix(counts))
}
X <- CheckCounts(new_counts)
library(slam)
## Null model log probability
sx <- sum(X)
qnull <- col_sums(X)/sx
null <- sum( X$v*log(qnull[X$j]) ) - 0.5*(n+p)*(log(sx) - log(2*pi))
CheckCounts <- function(counts){
if(class(counts)[1] == "TermDocumentMatrix"){ counts <- t(counts) }
if(is.null(dimnames(counts)[[1]])){ dimnames(counts)[[1]] <- paste("doc",1:nrow(counts)) }
if(is.null(dimnames(counts)[[2]])){ dimnames(counts)[[2]] <- paste("wrd",1:ncol(counts)) }
empty <- row_sums(counts) == 0
if(sum(empty) != 0){
counts <- counts[!empty,]
cat(paste("Removed", sum(empty), "blank documents.\n")) }
return(as.simple_triplet_matrix(counts))
}
n <- nrow(X)
p <- ncol(X)
X <- CheckCounts(new_counts)
library(slam)
## Null model log probability
sx <- sum(X)
qnull <- col_sums(X)/sx
null <- sum( X$v*log(qnull[X$j]) ) - 0.5*(n+p)*(log(sx) - log(2*pi))
null
dmultinom(new_counts[1,], sum(new_counts[1,]),
prob= topics_null$omega[1,]%*%topics_null$theta)
dmultinom(new_counts[1,],
prob= topics_null$omega[1,]%*%topics_null$theta)
dmultinom(new_counts[1,],
prob= t(topics_null$omega[1,]%*%topics_null$theta))
t(topics_null$omega[1,]%*%topics_null$theta)
topics_null$omega[1,]%*%topics_null$theta
topics_null$omega[1,]%*%t(topics_null$theta))
topics_null$omega[1,]%*%t(topics_null$theta)
sum(topics_null$omega[1,]%*%t(topics_null$theta))
dmultinom(new_counts[1,],
prob= topics_null$omega[1,]%*%t(topics_null$theta))
dmultinom(new_counts[1,],
prob= topics_null$omega[1,]%*%t(topics_null$theta),
log=TRUE)
sum(unlist(lapply(1:35, function(n)
{
return(dmultinom(new_counts[n,],
prob= topics_null$omega[1,]%*%t(topics_null$theta),
log=TRUE))
})))
null <- sum( X$v*log(qnull[X$j]) ) - 0.5*(n+p)*(log(sx) - log(2*pi))
null
map_model_prob <- sum(unlist(lapply(1:35, function(n)
{
return(dmultinom(new_counts[n,],
prob= topics_clus$omega[1,]%*%t(topics_clus$theta),
log=TRUE))
})))
topics_clus <- topics(new_counts, K=2, tol=0.1);
K <- 2
barplot(t(topics_clus$omega[order(elevation_metadata),]),col=2:(K+1),axisnames=F,space=0,border=NA,main="",las=1,ylim=c(0,1),cex.axis=1.5,cex.main=1.4, xlab="elevation")
title(main=paste("Structure Plot topic proportions,k=",K))
combo_patch_dir = paste0(round(elevation_metadata));
combo_patch_dir_ordered = combo_patch_dir[order(elevation_metadata)];
match_labs=match(unique(combo_patch_dir_ordered),combo_patch_dir_ordered);
match_labs_suffix=c(match_labs[2:length(unique(combo_patch_dir_ordered))],35);
match_labs_prefix=match_labs[1:(length(unique(combo_patch_dir_ordered)))];
labs=match_labs_prefix + 0.5*(match_labs_suffix - match_labs_prefix);
axis(1,at=labs,unique(combo_patch_dir_ordered),las=2);
abline(v=match_labs[2:length(match_labs)]);
map_model_prob <- sum(unlist(lapply(1:35, function(n)
{
return(dmultinom(new_counts[n,],
prob= topics_clus$omega[1,]%*%t(topics_clus$theta),
log=TRUE))
})))
map_model_prob
null_model_prob <- sum(unlist(lapply(1:35, function(n)
{
return(dmultinom(null_counts[n,],
prob= topics_null$omega[1,]%*%t(topics_null$theta),
log=TRUE))
})))
null_counts <- picante::randomizeMatrix(new_counts, null.model = "richness", iterations=1000);
null_model_prob <- sum(unlist(lapply(1:35, function(n)
{
return(dmultinom(null_counts[n,],
prob= topics_null$omega[1,]%*%t(topics_null$theta),
log=TRUE))
})))
null_model_prob
K <- 2
barplot(t(topics_null$omega[order(elevation_metadata),]),col=2:(K+1),axisnames=F,space=0,border=NA,main="",las=1,ylim=c(0,1),cex.axis=1.5,cex.main=1.4, xlab="elevation")
title(main=paste("Structure Plot topic proportions,k=",K))
combo_patch_dir = paste0(round(elevation_metadata));
combo_patch_dir_ordered = combo_patch_dir[order(elevation_metadata)];
match_labs=match(unique(combo_patch_dir_ordered),combo_patch_dir_ordered);
match_labs_suffix=c(match_labs[2:length(unique(combo_patch_dir_ordered))],35);
match_labs_prefix=match_labs[1:(length(unique(combo_patch_dir_ordered)))];
labs=match_labs_prefix + 0.5*(match_labs_suffix - match_labs_prefix);
axis(1,at=labs,unique(combo_patch_dir_ordered),las=2);
abline(v=match_labs[2:length(match_labs)]);
null_counts <- picante::randomizeMatrix(new_counts, null.model = "richness", iterations=1000);
topics_null <- topics(null_counts, K=2, tol=0.1);
K <- 2
barplot(t(topics_null$omega[order(elevation_metadata),]),col=2:(K+1),axisnames=F,space=0,border=NA,main="",las=1,ylim=c(0,1),cex.axis=1.5,cex.main=1.4, xlab="elevation")
title(main=paste("Structure Plot topic proportions,k=",K))
combo_patch_dir = paste0(round(elevation_metadata));
combo_patch_dir_ordered = combo_patch_dir[order(elevation_metadata)];
match_labs=match(unique(combo_patch_dir_ordered),combo_patch_dir_ordered);
match_labs_suffix=c(match_labs[2:length(unique(combo_patch_dir_ordered))],35);
match_labs_prefix=match_labs[1:(length(unique(combo_patch_dir_ordered)))];
labs=match_labs_prefix + 0.5*(match_labs_suffix - match_labs_prefix);
axis(1,at=labs,unique(combo_patch_dir_ordered),las=2);
abline(v=match_labs[2:length(match_labs)]);
null_model_prob <- sum(unlist(lapply(1:35, function(n)
{
return(dmultinom(null_counts[n,],
prob= topics_null$omega[1,]%*%t(topics_null$theta),
log=TRUE))
})))
null_model_prob
topics_clus <- topics(new_counts, K=2, tol=0.1);
map_model_prob <- sum(unlist(lapply(1:35, function(n)
{
return(dmultinom(new_counts[n,],
prob= topics_clus$omega[1,]%*%t(topics_clus$theta),
log=TRUE))
})))
map_model_prob
X <- CheckCounts(null_counts)
library(slam)
## Null model log probability
sx <- sum(X)
qnull <- col_sums(X)/sx
null_prob_1 <- sum( X$v*log(qnull[X$j]) ) - 0.5*(n+p)*(log(sx) - log(2*pi))
null_prob_1
X <- CheckCounts(new_counts)
library(slam)
## Null model log probability
sx <- sum(X)
qnull <- col_sums(X)/sx
null_prob_1 <- sum( X$v*log(qnull[X$j]) ) - 0.5*(n+p)*(log(sx) - log(2*pi))
null_prob_1
