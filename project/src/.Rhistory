getwd()
mclapply()
mclapply.hack()
install_github('kkdey/tmcmcR')
library(devtools)
install_github('kkdey/tmcmcR')
library(tmcmcR)
mclapply.hack()
rmc3()
tmcmcR:::mclapply.hack(1:4, function(x) return(x^2))
library(parallel)
tmcmcR:::mclapply.hack(1:4, function(x) return(x^2))
parallel:::mclapply(1:4, function(x) return(x^2))
parallel:::mclapply.hack(1:4, function(x) return(x^2))
tmcmcR:::mclapply.hack(1:4, function(x) return(x^2))
detectCores()
library(parallel)
library(parallel)
detectCores()
install.packages("Rmosek", type="source", repos="http://download.mosek.com/R/7")
install.packages("Rmosek", type="source", INSTALL_opts="--no-multiarch",
repos="http://download.mosek.com/R/7")
install.packages("Rmosek", repos="http://R-Forge.R-project.org", type="source", INSTALL_opts="--no-multiarch", configure.vars="PKG_MOSEKHOME=/Users/kushal/Documents/mosek/7/tools/platform/osx64x86 PKG_MOSEKLIB=mosek")
install.packages("Rmosek", repos="http://R-Forge.R-project.org", type="source", INSTALL_opts="--no-multiarch", configure.vars="PKG_MOSEKHOME=/Users/kushal/Documents/mosek/7/tools/platform/osx64x86 PKG_MOSEKLIB=mosek64")
mu.est.true <- smooth.spline(cell_times_sim, cycle_data[1,])
library(cellcycleR)
library(wavethresh)
G <- 100;
num_cells <- 256;
amp_genes1 <- rep(10, G);
phi_genes1 <- rep(c(2,5), each=G/2);
sigma_genes1 <- rchisq(G, 4);
cell_times_sim <- sort(sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE));
cycle_data <- t(sim_sinusoidal_cycle(G, amp_genes1, phi_genes1, sigma_genes1, cell_times_sim));
plot(cycle_data[1,])
sample_reorder <- sample(1:num_cells,num_cells, replace=FALSE);
cycle_data_reorder <- cycle_data[,sample_reorder];
plot(cycle_data_reorder[1,])
mu.est.true <- smooth.spline(cell_times_sim, cycle_data[1,])
plot(mu.est.true, type = "l")
mu.est.true <- system.time(smooth.spline(cell_times_sim, cycle_data[1,]))
mu.est.reorder <- smooth.spline(cell_times_sim, cycle_data_reorder[1,])
plot(mu.est.reorder, type = "l")
disp_reorder <- sum((cycle_data_reorder[1,] - mu.est.reorder)^2)
mu.est.reorder
plot(mu.est.reorder$y, type = "l")
disp_reorder <- sum((cycle_data_reorder[1,] - mu.est.reorder$y)^2)
disp_reorder
disp_true <- sum((cycle_data[1,] - mu.est.true$y)^2)
mu.est.true$y
mu.est.true
mu.est.true <- smooth.spline(cell_times_sim, cycle_data[1,])
disp_true <- sum((cycle_data[1,] - mu.est.true$y)^2)
disp_true
disp.true <- array(0,G);
smash_disp_true <- mean(sapply(1:G, function(g)
{
mu.est.true <- smooth.spline(cell_times_sim, cycle_data[g,])))
out <- sum((cycle_data[g,] - mu.est.true)^2)
return(out)
}))
disp.true <- array(0,G);
smash_disp_true <- mean(sapply(1:G, function(g)
{
mu.est.true <- smooth.spline(cell_times_sim, cycle_data[g,])
out <- sum((cycle_data[g,] - mu.est.true)^2)
return(out)
}))
disp.true <- array(0,G);
smash_disp_true <- mean(sapply(1:G, function(g)
{
mu.est.true <- smooth.spline(cell_times_sim, cycle_data[g,])
out <- sum((cycle_data[g,] - mu.est.true$y)^2)
return(out)
}))
smash_disp_true
library(parallel)
outdisp_set <- unlist(mclapply(1:20, function(l)
{
sample_reorder <- sample(1:num_cells,num_cells, replace=FALSE);
cycle_data_reorder <- cycle_data[,sample_reorder];
disp <- mean(sapply(1:G, function(g)
{
mu.est.reord <- smooth.spline(cell_times_sim, cycle_data_reorder[g,])
out <- sum((cycle_data_reorder[g,] - mu.est.reord$y)^2)
return(out)
}))
return(disp)
}, mc.cores=detectCores()))
outdisp_set
outdisp_set <- system.time(unlist(mclapply(1:20, function(l)
{
sample_reorder <- sample(1:num_cells,num_cells, replace=FALSE);
cycle_data_reorder <- cycle_data[,sample_reorder];
disp <- mean(sapply(1:G, function(g)
{
mu.est.reord <- smooth.spline(cell_times_sim, cycle_data_reorder[g,])
out <- sum((cycle_data_reorder[g,] - mu.est.reord$y)^2)
return(out)
}))
return(disp)
}, mc.cores=detectCores())))
outdisp_set
mu.est.true <- scatter.smooth(cell_times_sim, cycle_data[1,])
plot(mu.est.true, type = "l")
mu.est.true
mu.est.true <- loess.smooth(cell_times_sim, cycle_data[1,])
plot(mu.est.true, type = "l")
mu.est.reorder <- loess.smooth(cell_times_sim, cycle_data_reorder[1,])
plot(mu.est.reorder, type = "l")
cycle_data_reorder[1,]
plot(cycle_data_reorder[1,])
disp_reorder <- sum((cycle_data_reorder[1,] - mu.est.reorder$y)^2)
disp_true <- sum((cycle_data[1,] - mu.est.true$y)^2)
mu.est.reorder
cycle_data[1,]
library(cellcycleR)
library(wavethresh)
G <- 100;
num_cells <- 256;
amp_genes1 <- rep(10, G);
phi_genes1 <- rep(c(2,5), each=G/2);
sigma_genes1 <- rchisq(G, 4);
cell_times_sim <- sort(sample(seq(0,2*pi, 2*pi/(num_cells-1)), num_cells, replace=FALSE));
cycle_data <- t(sim_sinusoidal_cycle(G, amp_genes1, phi_genes1, sigma_genes1, cell_times_sim));
plot(cycle_data[1,])
sample_reorder <- sample(1:num_cells,num_cells, replace=FALSE);
cycle_data_reorder <- cycle_data[,sample_reorder];
plot(cycle_data_reorder[1,])
mu.est.true <- loess.smooth(cell_times_sim, cycle_data[1,])
plot(mu.est.true, type = "l")
mu.est.true
mu.est.true <- smoothScatter(cell_times_sim, cycle_data[1,])
plot(mu.est.true, type = "l")
mu.est.true <- smoothScatter(cell_times_sim, cycle_data[1,])
mu.est.true
mu.est.true <- loess(cycle_data[1,] \sim cell_times_sim)
mu.est.true <- loess(cycle_data[1,] ~ cell_times_sim)
mu.est.true
mu.est.true$fitted
plot(mu.est.true$fitted, type = "l")
mu.est.reorder <- loess(cycle_data_reorder[1,] ~ cell_times_sim)
plot(mu.est.reorder$fitted, type = "l")
mu.est.true <- wr(threshold(wd(cycle_data[1,]), type="soft"));
plot(mu.est.true, type = "l")
mu.est.reorder <- wr(threshold(wd(cycle_data_reorder[1,]), type="soft"));
plot(mu.est.reorder, type = "l")
library(twitteR)
trump_tweets <- userTimeline("realDonaldTrump", n=3200)
trump_tweets_df <- do.call("rbind", lapply(trump_tweets, as.data.frame))
library(twitteR)
df1 <- do.call("rbind", lapply(tweet_list_1, as.data.frame))
df2 <- do.call("rbind", lapply(tweet_list_2, as.data.frame))
df3 <- do.call("rbind", lapply(tweet_list_3, as.data.frame))
df1 <- data.frame(cbind.data.frame(df$created, df$screenName, df$retweetCount, df$favoriteCount))
head(df1)
df2 <- df1[1:20,];
counts=table(df2$df.retweetCount)
retweets <- df2$df.retweetCount;
names(retweets) <- df2$df.screenName
barplot(retweets, las=2, cex.names=0.5)
tweet_list <- searchTwitter("#trump", since='2016-03-14', until='2016-03-15')
trump_tweets <- userTimeline("realDonaldTrump", n=3200)
trump_tweets_df <- do.call("rbind", lapply(trump_tweets, as.data.frame))
tweet_dates <- substr(trump_tweets_df$created,1,10)
tweet_days <- factor(substr(tweet_dates, 9, 10));
tweet_months <- factor(substr(tweet_dates, 6,7));
library(plyr)
tweet_months_fixed <- mapvalues(tweet_months, from=levels(tweet_months),
to=c("2016-Jan", "2016-Feb","2016-Mar","2015-Oct",
"2015-Nov", "2015-Dec"));
tweet_months_fixed <- factor(tweet_months_fixed, levels=c("2015-Oct", "2015-Nov","2015-Dec","2016-Jan", "2016-Feb", "2016-Mar"))
tweet_years <- substr(trump_tweets_df$created,1,4)
retweets <- trump_tweets_df$retweetCount;
favtweets <- trump_tweets_df$favoriteCount;
barplot(retweets)
scatter.smooth(retweets, favtweets, lwd=1, pch=20, col="blue",
main="Trump Twitter Feed")
library(fastR)
library(mosaic)
library(devtools)
install_github('kkdey/TrumpTwitterFeed')
e
library(TrumpTwitterFeed)
data("trump.data")
trump.data.frame <- data.frame(trump.data);
data("trump.data")
rm(trump.data.frame)
data("trump.data")
trump.data.frame
rm(list=ls())
library(TrumpTwitterFeed)
data("trump.data.frame")
library(devtools)
install_github('kkdey/TrumpTwitterFeed')
library(TrumpTwitterFeed)
data("trump.data.frame")
trump.data.frame
dim(trump.data.frame)
head(trump.data.frame[,1:5], 3)
tail(trump.data.frame[,1:5], 3)
scatter.smooth(trump.data.frame$retweets,
trump.data.frame$favorites, lwd=1, pch=20,
col="blue",xlab="Retweets", ylab="Favorites")
trump.data.frame[2,]
trump.data.frame[4,]
trump.data.frame[6,]
trump.data.frame[12,]
rm(list=ls())
require(mosaic)
library(TrumpTwitterFeed)
data("trump.data.frme")
data("trump.data.frame")
dim(trump.data.frame)
trump.data.frame[1,]
head(trump.data.frame,3)
tail(trump.data.frame, 3)
glimpse(trump.data.frame)
summary(trump.data.frame)
trump.data.frame$retweets
sorted_retweet_counts <- sort(trump.data.frame$retweets)
head(sorted_retweet_counts, 5)
tail(sorted_retweet_counts, 5)
median(sorted_retweet_counts)
quantile(~retweets, data=trump.data.frame)
IQR(~retweets, data=trump.data.frame)
bargraph(retweets ~ trump.data.frame, data=trump.data.frame)
bargraph(retweets ~ trump.data.frame, data=trump.data.frame, type="percent")
bargraph(retweets ~ tweet_month, data=trump.data.frame, type="percent")
bargraph(retweets ~ tweet_year, data=trump.data.frame, type="percent")
bargraph(retweets ~ tweet_day, data=trump.data.frame, type="percent")
bargraph(retweets ~ tweet_day | tweet_year, data=trump.data.frame, type="percent")
bargraph(retweets ~ tweet_day | tweet_year, data=trump.data.frame, type="percent", layout=c(1,2))
bargraph(retweets ~ tweet_day | tweet_month, data=trump.data.frame, type="percent", layout=c(3,3))
bargraph(retweets ~ tweet_month, data=trump.data.frame, type="percent")
histogram(retweets ~ tweet_month, data=trump.data.frame, type="percent")
scatter.smooth(trump.data.frame$retweets, trump.data.frame$favorites)
scatter.smooth(trump.data.frame$retweets, trump.data.frame$favorites, col="blue", pch=20, lwd=1)
mtweets2 <- mean(retweets); stweets2 <- sd(retweets);
hist(retweets, xlab="Log of number of retweets",
xlim=c(mtweets2-3*stweets2,mtweets2+3*stweets2), breaks=100,
freq=FALSE, col="lightgray", ylim=c(0,0.55), main="Histogram (100 bins)")
lines(density(retweets, na.rm=TRUE))
curve(dnorm(x, mtweets2, stweets2), lwd=4, lty=2, from = mtweets2-3*stweets2, to = mtweets2+3*stweets2, add=TRUE)
mtweets2 <- mean(trump.data.frame$retweets); stweets2 <- sd(trump.data.frame$retweets);
hist(trump.data.frame$retweets, xlab="Log of number of retweets",
xlim=c(mtweets2-3*stweets2,mtweets2+3*stweets2), breaks=100,
freq=FALSE, col="lightgray", ylim=c(0,0.55), main="Histogram (100 bins)")
lines(density(trump.data.frame$retweets, na.rm=TRUE))
curve(dnorm(x, mtweets2, stweets2), lwd=4, lty=2, from = mtweets2-3*stweets2, to = mtweets2+3*stweets2, add=TRUE)
mtweets2 <- mean(trump.data.frame$retweets); stweets2 <- sd(trump.data.frame$retweets);
hist(trump.data.frame$retweets, xlab="Log of number of retweets",
xlim=c(mtweets2-3*stweets2,mtweets2+3*stweets2), breaks=100,
freq=FALSE, col="lightgray", ylim=c(0,0.55), main="Histogram (100 bins)")
lines(density(trump.data.frame$retweets, na.rm=TRUE))
curve(dnorm(x, mtweets2, stweets2), lwd=4, lty=2, from = mtweets2-3*stweets2, to = mtweets2+3*stweets2, add=TRUE)
hist(trump.data.frame$retweets, xlab="Log of number of retweets",
xlim=c(mtweets2-3*stweets2,mtweets2+3*stweets2), breaks=100,
freq=FALSE, col="lightgray", ylim=c(0,0.55), main="Histogram (100 bins)")
trump.data.frame$retweets
hist(trump.data.frame$retweets, xlab="Log of number of retweets",
xlim=c(min(trump.data.frame$retweets), max(trump.data.frame$retweets)), breaks=100,
freq=FALSE, col="lightgray", ylim=c(0,0.55), main="Histogram (100 bins)")
hist(trump.data.frame$retweets, xlab="Log of number of retweets",
xlim=c(min(trump.data.frame$retweets), max(trump.data.frame$retweets)), breaks=100,
freq=FALSE, col="lightgray", main="Histogram (100 bins)")
lines(density(trump.data.frame$retweets, na.rm=TRUE))
curve(dnorm(x, mtweets2, stweets2), lwd=4, lty=2, from = mtweets2-3*stweets2, to = mtweets2+3*stweets2, add=TRUE)
vec <- 3.4, 2.3, 6.7, 2.1, 5.0
vec <- c(3.4, 2.3, 6.7, 2.1, 5.0)
quantile(vec)
favstats(retweets | tweet_years, data=trump.data.frame)
favstats(retweets | tweet_year, data=trump.data.frame)
scatter.smooth(trump.data.frame$retweets,
trump.data.frame$favorites, lwd=1, pch=20,
col="blue", xlab="Retweets of Trump posts",
ylab="Favorites of Trump posts")
mtweets <- mean(log(trump.data.frame$retweets+1))
stweets <- sd(log(trump.data.frame$retweets+1))
stdtweets = (log(trump.data.frame$retweets+1) - mtweets) / stweets
head(sort(stdtweets),3)
tail(sort(stdtweets),3)
p = c(0.01, 0.025, 0.16, 0.25, 0.50, 0.75, 0.84, 0.975, 0.99)
modelQuantile = qnorm(p)
modelQuantile
dataQuantile = quantile(stdtweets, p, na.rm=TRUE)
dataQuantile
rbind(dataQuantile, modelQuantile)
limits = c(0.9*min(dataQuantile,modelQuantile), 1.1*max(dataQuantile,modelQuantile))
limits = c(-4,4)
xyplot(dataQuantile ~ modelQuantile, abline=list(a=0,b=1), xlim=limits, ylim=limits, cex=1.5)
xyplot((dataQuantile-modelQuantile) ~ modelQuantile, abline=list(h=0), cex=1.5)
xyplot(dataQuantile ~ modelQuantile, abline=list(a=0,b=1), xlim=limits,
ylim=limits, cex=1.5, lwd=1)
xyplot(dataQuantile ~ modelQuantile, abline=list(a=0,b=1), xlim=limits,
ylim=limits, cex=1.5, lwd=1,pch=20)
xyplot(dataQuantile ~ modelQuantile, abline=list(a=0,b=1), xlim=limits,
ylim=limits, cex=1.5, lwd=1,pch=20)
xyplot((dataQuantile-modelQuantile) ~ modelQuantile, abline=list(h=0),
cex=1.5, lwd=1,pch=20)
mtweets2 <- mean(trump.data.frame$retweets)
stweets2 <- sd(trump.data.frame$retweets)
stdtweets2 = (trump.data.frame$retweets - mtweets2) / stweets2
dataQuantile = quantile(stdtweets2, p, na.rm=TRUE)
limits = c(0.9*min(dataQuantile,modelQuantile), 1.1*max(dataQuantile,modelQuantile))
limits = c(-4,4)
xyplot(dataQuantile ~ modelQuantile, abline=list(a=0,b=1), xlim=limits,
ylim=limits, cex=1.5, lwd=1,pch=20)
n.out <- 200
omega_sim <- rbind( cbind( rep(1, n.out), rep(0, n.out)),
cbind( rep(0, n.out), rep(1, n.out)),
cbind( seq(0.6, 0.4, length.out = n.out),
1- seq(0.6, 0.4,length.out=n.out)) )
dim(omega_sim)
K <- dim(omega_sim)[2]
freq <- rbind( c(0.1, 0.2, rep(0.70/98, 98)),
c(rep(0.70/98,98), 0.1, 0.2) )
str(freq)
counts <- t( do.call(cbind,
lapply(1:dim(omega_sim)[1],
function(x)
rmultinom(1,1000,prob=omega_sim[x,]%*%freq))))
dim(counts)
topic.fit <- maptpx::topics(counts, K=2);
omega <- topic.fit$omega;
theta <- topic.fit$theta;
lambda <- omega %*% t(theta);
dim(lambda)
lambda[1:5,1:5]
dim(counts)
omega_sim
library(ggplot2)
data("diamonds")
dim(diamonds)
head(diamonds)
qplot(carat, price)
qplot(carat, price, data=diamonds)
qplot(diamonds$carat, diamonds$price, main="Carat vs price")
qplot(carat, price, data=diamonds, main="Carat vs price")
qplot(log(carat), log(price), data=diamonds, main="Carat vs price (Log scale)")
qplot(carat, price, data = dsmall, colour = color)
set.seed(1410)
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
dim(dsmall)
qplot(carat, price, data = dsmall, colour = color)
qplot(carat, price, data = dsmall, colour = color, shape=cut)
qplot(carat, price, data = dsmall, shape=cut)
qplot(carat, price, data = diamonds, alpha = I(1/10))
qplot(carat, price, data = diamonds, alpha = I(1/100))
qplot(carat, price, data = diamonds, alpha = I(1/200))
qplot(carat, price, data = dsmall, geom = c("point", "smooth"))
qplot(carat, price, data = dsmall, geom = "point")
qplot(carat, price, data = dsmall, geom = "smooth")
qplot(carat, price, data = dsmall, geom = c("point", "smooth"))
qplot(carat, price, data = diamonds, geom = c("point", "smooth"))
qplot(color, price / carat, data = diamonds)
qplot(color, price / carat, data = diamonds, geom = "jitter",
alpha = I(1 / 5))
qplot(color, price / carat, data = diamonds, geom = "boxplot")
qplot(carat, price, data = dsmall, geom = "boxplot")
qplot(carat, data = diamonds, geom = "histogram")
qplot(carat, data = diamonds, geom = "density")
qplot(carat, data = diamonds, geom = c("histogram", "density"))
qplot(carat, data = diamonds, geom = "histogram")
qplot(carat, data = diamonds, geom = "histogram", breaks=40)
qplot(carat, data = diamonds, geom = "histogram",  binwidth = 1)
qplot(carat, data = diamonds, geom = "histogram",  binwidth = 0.01)
qplot(carat, data = diamonds, geom = "histogram",  binwidth = 0.01, fill=colors)
qplot(carat, data = diamonds, geom = "histogram",  binwidth = 0.01, fill=colour)
qplot(carat, data = diamonds, geom = "histogram",  binwidth = 0.01, fill=color)
qplot(carat, data = diamonds, geom = "histogram",  binwidth = 0.01, colours=color)
qplot(carat, data = diamonds, geom = "histogram",  binwidth = 0.01, colour=color)
qplot(carat, data = diamonds, geom = "density",  binwidth = 0.01, colour=color)
qplot(carat, data = diamonds, geom = "density", colour=color)
qplot(color, data = diamonds, geom = "bar")
qplot(color, data = diamonds, geom = "bar", weight = carat) +
scale_y_continuous("carat")
qplot(color, data = diamonds, geom = "bar", weight = carat)
qplot(carat, ..density.., data = diamonds, facets = color ~ .,
geom = "histogram", binwidth = 0.1, xlim = c(0, 3))
qplot(carat, data = diamonds, facets = color ~ .,
geom = "histogram", binwidth = 0.1, xlim = c(0, 3))
warning()
qplot(carat, price, data = dsmall, colour = I('red'))
qplot(displ, hwy, data = mpg, colour = factor(cyl))
qplot(displ, hwy, data=mpg, colour=factor(cyl), geom="line") +
opts(drop = "legend_box")
qplot(displ, hwy, data=mpg, colour=factor(cyl), geom="line")
qplot(displ, hwy, data=mpg, colour=factor(cyl), geom="line") + opts(drop = "legend_box")
qplot(displ, hwy, data=mpg, colour=factor(cyl), geom="line") + theme(drop = "legend_box")
qplot(displ, hwy, data=mpg, colour=factor(cyl), geom="bar",
stat="identity", position = "identity")
qplot(displ, hwy, data=mpg, colour=factor(cyl)) +
geom_smooth(data= subset(mpg, cyl != 5), method="lm")
qplot(displ, hwy, data=mpg, colour=factor(cyl))
qplot(displ, hwy, data=mpg, colour=factor(cyl)) +
geom_smooth(data= subset(mpg, cyl != 5), method="lm")
qplot(displ, hwy, data=mpg, colour=factor(cyl)) +
geom_smooth(data= mpg, method="lm")
qplot(displ, hwy, data=mpg, facets = . ~ year) + geom_smooth()
+ theme(legend.position = 'none')
x <- 1:10
y <- factor(letters[1:5])
qplot(x, x, size = x)
qplot(x, x, size = x) + theme(legend.position = 'none')
x <- 1:10
y <- factor(letters[1:5])
qplot(x, x, size = x)
x1 <- c(1,10)
y1 <- c(1, 5)
p <- qplot(x1, y1, geom="blank", xlab=NULL, ylab=NULL) + theme_bw()
p
p
p + coord_trans(y="log10")
p + coord_polar()
qplot(displ, hwy, data = mpg, colour = factor(cyl))+ theme_bw()
p <- qplot(displ, hwy, data = mpg, colour = factor(cyl))
summary(p)
qplot(displ, hwy, data = mpg, colour = factor(cyl))
qplot(displ, hwy, data = mpg, colour = factor(cyl), geom="bar")
qplot(displ, hwy, data = mpg, colour = factor(cyl), geom="line")
library(devtools)
install_github("kkdey/GOTnames")
data(GOT.names)
rm(list=ls())
library(devtools)
install_github("kkdey/GOTnames")
data(GOT.names)
library(devtools)
install_github("kkdey/GOTnames")
data(GoT.names)
library(devtools)
install_github("kkdey/GOTnames")
library(GOTnames)
data(GOT.names)
data(GoT.names)
GOTnames::GoT.names
GoT.names
2/5
8/50
16/50
6/50
8/50
16/30
6/30
8/30
2/18
16/18
10/16
6/16
d <- data.frame(
gender_id<- c("M","M","M","F","F","F"),
entertain_id <- c("Dance", "Sports", "TV", "Dance", "Sports", "TV"),
values <- c(0.04, 0.2, 0.16, 0.32, 0.12, 0.16))
require(lattice)
barchart(values ~ gender_id, groups=entertain_id, data=d, auto.key = list(columns = 2))
barchart(values ~ entertain_id, groups=gender_id, data=d, auto.key = list(columns = 3))
sample(1:50, 34, replace = TRUE)
sample(1:50, 34, replace = )
sample(1:50, 34, replace = FALSE)
34/50 -16/50
10/34 - 4/16
library(HimalayanBirdsAbundance)
library(HimalayanBirdsAbundance)
data("HimalayanBirdsAbundance")
new_counts <- t(exprs(HimalayanBirdsAbundance));
metadata <- pData(HimalayanBirdsAbundance);
setwd("~/Documents/topotpx-ghpages/project/src")
elevation_metadata=metadata$Elevation;
east_west_dir = metadata$WorE;
morph <- read.csv(file = "../external_data/MorphEco.csv", header = T, row.names =1)
morph <- morph[as.vector(colnames(new_counts)),]
morph.log <- log(morph[,1:6])
morph.eco <- morph[,7:20]
morph <- cbind(morph.log, morph.eco)
morph.pc <- prcomp(morph, center=T, scale=T)
morph.pc <- prcomp(morph_filtered, center=T, scale=T)
new_counts <- new_counts[, which(colSums(new_counts)!=0)]
voom_counts <- limma::voom(new_counts)$E;
env.variables <- metadata[,5:8];
pooled_data <- cbind(voom_counts, env.variables);
cov_features <- cov(pooled_data)
system.time(glasso_out <-glasso::glasso(cov_features, rho=.01))
library(network)
glasso_out$wi.cor <- cov2cor(glasso_out$wi);
source("../R/ash_cor.R")
glasso_out$wi.cor.shrunk <- ash_cor(glasso_out$wi.cor, nsamples=309);
glasso_out$wi.cor.shrunk[which(abs(glasso_out$wi.cor.shrunk) < 0.001)]=0;
row.names(glasso_out$wi.cor.shrunk) <- colnames(cov_features);
glasso_out$wi.cor.shrunk.birds <- glasso_out$wi.cor.shrunk[1:305,1:305];
morph_filtered <- morph[match(rownames(glasso_out$wi.cor.shrunk.birds), rownames(morph)),]
morph.pc <- prcomp(morph_filtered, center=T, scale=T)
morph.pc$x[,1:4]
dim(morph_filtered)
morph.pc <- prcomp(t(morph_filtered), center=T, scale=T)
?prcomp
dim(morph_filtered)
morph.pc <- prcomp(tmorph_filtered, center=T, scale=T)
morph.pc <- prcomp(morph_filtered, center=T, scale=T)
dim(morph.pc)
names(morph.pc)
morph.pc$sdev
plot(morph.pc$sdev)
morph.pc$rotation
morph.pc$rotation[,1]
morph.pc$rotation[,2]
morph.pc$rotation[,3]
morph.pc$rotation[,4]
morph.pc$x[,4]
which.max(morph.pc$x[,4])
hist(morph.pc$x[,4])
sort(morph.pc$x[,4])
